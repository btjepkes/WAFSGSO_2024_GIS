[
  {
    "objectID": "spatial-data-in-R.html",
    "href": "spatial-data-in-R.html",
    "title": "4. Spatial Data in R",
    "section": "",
    "text": "R is a powerful programming language used for data analysis and visualization\nWide range of packages and libraries, making it suitable for various scientific disciplines, including spatial data analysis in wildlife and fisheries science\n\n\n\n\n\nIntegrated development environment for R (and Python, Julia)\nInterface with data sources and tables, allows for code completion and syntax highlighting\nAllows for easy access to version control functionality, such as git and GitHub\nAlternatives = VSCode, Jupyter Notebook\n\n\n\n\nRStudio interface"
  },
  {
    "objectID": "spatial-data-in-R.html#what-is-r-and-rstudio",
    "href": "spatial-data-in-R.html#what-is-r-and-rstudio",
    "title": "4. Spatial Data in R",
    "section": "",
    "text": "R is a powerful programming language used for data analysis and visualization\nWide range of packages and libraries, making it suitable for various scientific disciplines, including spatial data analysis in wildlife and fisheries science\n\n\n\n\n\nIntegrated development environment for R (and Python, Julia)\nInterface with data sources and tables, allows for code completion and syntax highlighting\nAllows for easy access to version control functionality, such as git and GitHub\nAlternatives = VSCode, Jupyter Notebook\n\n\n\n\nRStudio interface"
  },
  {
    "objectID": "spatial-data-in-R.html#why-use-r-for-spatial-data",
    "href": "spatial-data-in-R.html#why-use-r-for-spatial-data",
    "title": "4. Spatial Data in R",
    "section": "Why Use R for Spatial Data?",
    "text": "Why Use R for Spatial Data?\n\nOpen source (free) option to build maps, perform analyses, and convert data\n\nIf working with non-profits or in academia, many entities have expertise in R\n\nAllows for reproducible science and workflows (sound familiar?)\n\nSupplementary material for manuscripts\nCo-workers can use entire scripts or snippets to update models and maps\n\nIntegrates with thousands of other R packages for modeling, spatial statistics, and visualization\nWell-documented and plenty of examples from a continuously growing community of R users"
  },
  {
    "objectID": "spatial-data-in-R.html#basics-of-r-programming",
    "href": "spatial-data-in-R.html#basics-of-r-programming",
    "title": "4. Spatial Data in R",
    "section": "Basics of R Programming",
    "text": "Basics of R Programming\nEach programming language has specific ways of doing things, and R is no different. The following section contains a general introduction to R classes and data types.\n\nData Classes\nDepending on which operations you are performing, the data class will make a huge difference. These classes determine how R treats and operates on the data.\n\nNumeric\nNumeric data class represents continuous numerical values. E.g., temperature\n\n# Print a numeric vector\nc(3.14, 2.718, -10, 100.5)\n\n[1]   3.140   2.718 -10.000 100.500\n\n\n\n\nInteger\nInteger data class represents whole numbers without decimal points. E.g., counts\n\n# Print an integer vector\nc(1L, 2L, -5L, 100L)\n\n[1]   1   2  -5 100\n\n\n\n\nCharacter\nCharacter data class represents text strings. E..g., identification\n\n# Creating a character vector\nc(\"apple\", \"banana\", \"cherry\")\n\n[1] \"apple\"  \"banana\" \"cherry\"\n\n\n\n\nFactor\nFactor data class represents categorical variables with a fixed set of possible values. E.g., land cover\n\n# Creating a factor vector\nfactor(c(\"male\", \"female\", \"female\", \"male\"),\n       # specify levels\n       levels = c(\"male\", \"female\"))\n\n[1] male   female female male  \nLevels: male female\n\n\n\n\nLogical\nLogical data class represents binary values indicating true or false. E.g., presence/abscence\n\n# Creating a logical vector\nc(TRUE, FALSE, TRUE, TRUE)\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n# Specify binary as logical\nas.logical(c(1,1,0,1,0))\n\n[1]  TRUE  TRUE FALSE  TRUE FALSE\n\n\n\n\n\nData Types/Structures\n\nVectors:\nOne-dimensional arrays that can hold numeric, character, or logical values.\n\n# Numeric vector\nc(1, 2, 3, 4, 5)\n\n[1] 1 2 3 4 5\n\n# Character vector\nc(\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\")\n\n[1] \"apple\"  \"banana\" \"orange\" \"grape\"  \"kiwi\"  \n\n# Logical vector\nc(TRUE, FALSE, TRUE, FALSE, TRUE)\n\n[1]  TRUE FALSE  TRUE FALSE  TRUE\n\n\n\n\nMatrices:\nTwo-dimensional arrays with rows and columns of the same data type.\n\n# Create a matrix\n# Create a 3x3 matrix with data filled by row-wise\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) \n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\n\nData Frames:\nTabular data structures, similar to spreadsheets, consisting of rows and columns.\n\n# Create a data frame\ndata.frame(\n  Name = c(\"John\", \"Alice\", \"Bob\", \"Emily\"),\n  Age = c(25, 30, 35, 28),\n  Gender = c(\"Male\", \"Female\", \"Male\", \"Female\"),\n  stringsAsFactors = FALSE\n)\n\n   Name Age Gender\n1  John  25   Male\n2 Alice  30 Female\n3   Bob  35   Male\n4 Emily  28 Female\n\n\n\n\nLists:\nCollections of objects, which can be of different data types.\n\nlist(\n  numeric_vector = c(1, 2, 3),\n  character_vector = c(\"a\", \"b\", \"c\"),\n  matrix_data = matrix(1:4, nrow = 2),\n  data_frame = data.frame(\n    Name = c(\"John\", \"Alice\"),\n    Age = c(25, 30),\n    stringsAsFactors = FALSE\n  )\n)\n\n$numeric_vector\n[1] 1 2 3\n\n$character_vector\n[1] \"a\" \"b\" \"c\"\n\n$matrix_data\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n$data_frame\n   Name Age\n1  John  25\n2 Alice  30\n\n\n\n\n\nBasic Operations\n\nArithmetic operations:\nThese run mathematical operations on two or more elements.\n\n# Addition\n10 + 5\n\n[1] 15\n\n# Subtraction\n10 - 5\n\n[1] 5\n\n# Multiplication\n10 * 5\n\n[1] 50\n\n# Division\n10 / 5\n\n[1] 2\n\n# Explonetiation\n10 ^ 5\n\n[1] 1e+05\n\n# Square root\nsqrt(10)\n\n[1] 3.162278\n\n\n\n\nLogical operations:\nThese assess relationships between two or more elements.\n\n# Less than\n10 &lt; 5\n\n[1] FALSE\n\n# Greater than\n10 &gt; 5\n\n[1] TRUE\n\n# Equal to\n10 == 5\n\n[1] FALSE\n\n# Not equal to\n10 != 5\n\n[1] TRUE\n\n\n\n\nAssignment operators:\nThese assign values or groups of values to an object that is stored in memory.\n\n# Assigning numeric\nvar_1 &lt;- 10\nvar_1\n\n[1] 10\n\n# Assigning character strings\nvar_2 &lt;- \"species\"\nvar_2\n\n[1] \"species\"\n\n# Assigning vector of strings\nvar_3 &lt;- c(\"sppA\", \"sppB\", \"sppC\")\nvar_3\n\n[1] \"sppA\" \"sppB\" \"sppC\"\n\n\n\n\nFunction calls:\nThese pass a series of arguments to a pre-defined process, called a function.\nname_of_function(argument_1 = value_1,\n                 argument_2 = value_2,\n                 argument_3 = value_3)"
  },
  {
    "objectID": "spatial-data-in-R.html#r-packages",
    "href": "spatial-data-in-R.html#r-packages",
    "title": "4. Spatial Data in R",
    "section": "R Packages",
    "text": "R Packages\nPackages in R are collections of functions curated by developers to make life easier. They extend the functionality by providing additional tools, common workflows, and accessible datasets.\n\nInstalling & Loading Packages\nR packages can generally be downloaded/installed via two primary methods. (1) from the CRAN - Comprehensive R Archive Network, or (2) from a GitHub repository containing the package. While many popular packages are on CRAN, specific application packages might only be available on GitHub.\n# Installing packages from CRAN\ninstall.packages(\"package_name\")\n\n# Installing packages from GitHub\n  ## Install and load the remotes package (if not already installed)\n  if (!requireNamespace(\"remotes\", quietly = TRUE)) {\n    install.packages(\"remotes\")}\n  library(remotes)\n  ## Install the package from the GitHub repository\n  install_github(\"username/repository\")\n\n# Loading any installed package\nlibrary(package_name)\n\n\nThe Tidyverse\nThe tidyverse is a collection of R packages designed for data science and statistical analysis. It provides a cohesive framework for working with data by emphasizing consistency, readability, and efficiency.\n# Installing the tidyverse entirely, note the name as a string\ninstall.packages(\"tidyverse\")\nThe core philosophy of the tidyverse centers around the principles outlined in the “tidy data” concept, where datasets are organized in a structured format with each variable forming a column, each observation forming a row, and each type of observational unit forming a table.\n\nggplot2 - for creating static and interactive visualizations\ndplyr - for data manipulation, filtering, and summarizing\ntidyr - for getting data into tidy wide and tidy long formats\nreadr - for reading flat files, like .csv and .tsv\npurrr - for working with functions and vectors\ntibble - for easy handling of tidy dataframes\nstringr - for working with strings\nforcats - for working with factors (categorical data)\n\n\nPiping Functions\nThe tidyverse also introduced the pipe (%&gt;%) which allows the chaining of functions. Pipes enable expressive code where the output of a previous function becomes the first argument of the next function, enabling chaining. RStudio now has a native pipe (|&gt;) that works with a variety of non-tidyverse packages. Note: ctrl+shift+M = shortcut\n# Example code with piped functions, note the native R pipe used\npresent_veg_area &lt;- present_veg_sf |&gt; \n  mutate(BeaverVegCat = as.factor(BeaverVegCat)) |&gt; \n  group_by(LandscapeID, BeaverVegCat, Survey_Year) |&gt; \n  summarise(total_veg_area_m2 = sum(area_m2, na.rm = TRUE)) |&gt; \n  arrange(LandscapeID)"
  },
  {
    "objectID": "spatial-data-in-R.html#common-r-spatial-packages",
    "href": "spatial-data-in-R.html#common-r-spatial-packages",
    "title": "4. Spatial Data in R",
    "section": "Common R Spatial Packages",
    "text": "Common R Spatial Packages\nThere are likely over 100 R packages that can handle some aspect of spatial data, these are the most popular ones that we will explore some in the workshop. A more comprehensive list can be found here: https://cran.r-project.org/web/views/Spatial.html\nSpatial packages in R are currently in a transition period, with many historically common packages being replaced by newer, more performant varieties. E.g., sp, rgdal, rgeos, and raster are deprecated along with their spatial object types, but are often still dependencies.\nNote:  indicates packages utilized in this workshop.\n\nFor General Spatial Data Handling\n\nsf - for working with vector spatial data \nterra - for working with raster spatial data \nstars - for working with spatial time series (vector and raster data cubes)\nspatstat - for spatial statistics, focusing on spatial point patterns\nsfnetworks - for analysis of geospatial networks\ngeometa - for writing and reading OGC/ISO geographic metadata in R\nncdf4 - for reading, writing, and manipulating netCDF files\nmapedit - for drawing, editing, and deleting spatial data interactively in R\n\n\n\nFor Ecology & Natural Resources\n\nrgbif - interface with the GBIF to download and view species occurrence records from database\nlandscapemetrics - for landscape ecology metric calculations (FRAGSTATS for R)\nspatialEco - for spatial analysis and modelling of ecological systems\nade4 - some capabilities for spatial multivariate analysis methods for ecology\nadehabitatHR - a collection of tools for analyzing wildlife habitat selection and spatial ecology\ndismo - tools for species distribution modeling and ecological niche modeling\n\n\n\nFor Mapping & Cartography\n\nggplot2 - creating static maps in the grammar of graphics style \ntmap - simple thematic maps, including both static and interactive map options \nmapsf - simple map creation using sf objects in the ggplot2 system, successor of cartography\nleaflet - for creating interactive web maps, including popups and basemaps\nmapview - provides an interactive viewer for exploring spatial data \nplotly - turns maps built with ggplot2 into interactive charts\nggspatial - adds spatial geometries and annotations to ggplot2\n\n\n\nFor Getting Spatial Data\n\nrnaturalearth - state and national boundaries across the United States and world\ntidycensus - population, state boundaries, and other census metrics\ntigris - TIGER/Line files (i.e., roads, highways) from U.S. Census\ngeodata - diverse source of climate, elevation, admin boundaries, land use, and more\nelevatr - elevation rasters across the world\nosmdata - any and all Open Street Map features, including roads, buildings, and more\nspocc - many species occurrence repositories, including GBIF, BISON, iNaturalist, eBird"
  },
  {
    "objectID": "spatial-data-in-R.html#loading-spatial-data-into-r",
    "href": "spatial-data-in-R.html#loading-spatial-data-into-r",
    "title": "4. Spatial Data in R",
    "section": "Loading Spatial Data Into R",
    "text": "Loading Spatial Data Into R\nSeveral R packages can load spatial data into the R environment, but we will focus on sf and terra for this workshop. Note that creating an R spatial object does not save it to a file directory automatically, it simply loads the spatial information into your current R session (in memory). For large files, it can be useful to subset to only include a specific area of interest (AOI).\n\nVector Data\nRemember that the vector data model represents points, lines, and polygons. We can load these spatial features into our R environment with the sf package using the st_read() function. But first we use the st_layers function to identify all the layers we have available to us in our geopackage.\n## Reference spatial layers from geopackage (n = 25)\ngpkg_dsn &lt;- \"BeaverHabitatSelection.gpkg\"\ngpkg_layers &lt;- sf::st_layers(dsn = gpkg_dsn)\n\n## Load in beaver-absent vegetation layer\nabsent_veg_sf &lt;- sf::st_read(dsn = gpkg_dsn,\n                             layer = gpkg_layers$name[3])\nIf we need to reference a shapefile in our directory, we can still use st_read() but need to specify the .shp extension in our function.\n# Set the file path to your shapefile (.shp)\npath &lt;- \"path/to/your/shapefile.shp\"\n\n# Read the shapefile using sf::st_read()\nshapefile &lt;- sf::st_read(path)\n\nSimple Feature Geometry Types\nThe “sf” in sf stands for simple features, which is an open data standard by the Open Geospatial Consortium (OGC). This standard is used across many software systems (e.g., QGIS, PostGIS) and contains seven core geometry types that are supported by sf.\n\nSingle Geometries\n\nPOINT - by using st_point()\nLINESTRING - by using st_linestring()\nPOLYGON - by using st_polygon()\n\nMultiple Geometries\n\nMULTIPOINT - by using st_multipoint()\nMULTILINESTRING - by using st_multilinestring()\nMULTIPOLYGON - by using st_multipolygon()\n\nGeometry Collections\n\nGEOMETRYCOLLECTION - by using st_geometrycollection()\n\n\n\n\n\nRaster Data\nRemember that the raster data model represents the world with a continuous grid of cells, called pixels. We can load raster files (e.g., .tif) into our R environment using the rast() function in the terra package.\n# Set tje file path to your raster, in this case a .tif\nraster_filepath = system.file(\"raster/srtm.tif\")\n\n# Read the raster as a SpatRaster\nmy_rast = rast(raster_filepath)\nEvery raster object has a header that can be viewed by calling the object in the console. This contains information like the dimensions and CRS of the raster.\n# Call the raster object to view its header\nmy_rast\n\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 457, 465, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 0.000833, 0.000833  (x, y)\n#&gt; extent      : -113, -113, 37.1, 37.5  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : lon/lat WGS 84 (EPSG:4326) \n#&gt; source      : srtm.tif \n#&gt; name        : srtm \n#&gt; min value   : 1024 \n#&gt; max value   : 2892\nIt is important to note that several other R packages still require raster data to be in the older format handled by the raster package. In this case, we can coerce our SpatRaster into the raster format.\n# Convert to a RasterLayer\nmy_RasterLayer &lt;- raster::raster(my_rast)\n\n# Convert to a RasterStack\nmy_RasterStack &lt;- raster::stack(my_rast, my_rast)"
  },
  {
    "objectID": "spatial-data-in-R.html#spatial-filtering-and-operations",
    "href": "spatial-data-in-R.html#spatial-filtering-and-operations",
    "title": "4. Spatial Data in R",
    "section": "Spatial Filtering and Operations",
    "text": "Spatial Filtering and Operations\n\nJoining\nworld_coffee = left_join(world, coffee_data)\n#&gt; Joining with `by = join_by(name_long)`\n\nclass(world_coffee)\n#&gt; [1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nRaster Calculations\n\n\nSummarizing Data\nworld_agg4  = world |&gt; \n  group_by(continent) |&gt; \n  summarize(Pop = sum(pop, na.rm = TRUE),\n            Area = sum(area_km2),\n            N = n())"
  },
  {
    "objectID": "spatial-data-in-R.html#mapping-spatial-data-in-r",
    "href": "spatial-data-in-R.html#mapping-spatial-data-in-r",
    "title": "4. Spatial Data in R",
    "section": "Mapping Spatial Data In R",
    "text": "Mapping Spatial Data In R\nAs we saw before, several packages can create maps in R so we have several to pick from. Which one you use will depend on your familiarity with the package and the purpose of the map you are creating.\nIn general, there are two types of maps we will create in R: (1) static, such as those for publications, and (2) interactive/dynamic, such as those we can view on our computer screens and allow us to zoom in and drag to navigate around the map.\n\nggplot\nlibrary(ggplot2)\n\n# Create a map using ggplot2\nggplot() +\n  geom_sf(data = World,\n          aes(group = group),\n          fill = \"lightblue\",\n          color = \"black\") +\n  labs(title = \"Map using ggplot2\") +\n  theme_minimal()\n\n\ntmap\nlibrary(tmap)\n\n# Create a map using tmap\ntm_shape(World) +\n  tm_polygons(col = \"lightblue\",\n              border.col = \"black\") +\n  tm_layout(title = \"Map using tmap\")\n\n\nmapview\nlibrary(mapview)\n\n# Create a map using mapview\nmapview(World,\n        zcol = NULL,\n        col.regions = \"lightblue\",\n        legend = TRUE, \n        map.types = \"Esri.WorldGrayCanvas\",\n        layer.name = \"Map using mapview\")"
  },
  {
    "objectID": "slides/outline.html#follow-along",
    "href": "slides/outline.html#follow-along",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Follow Along…",
    "text": "Follow Along…\n\n\n\nAdd in link to course documents/site."
  },
  {
    "objectID": "slides/outline.html#housekeeping",
    "href": "slides/outline.html#housekeeping",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Housekeeping",
    "text": "Housekeeping\n\n\n\nSchedule\n4 hours, including instruction and hands-on exercises.\nBreaks\nAfter each hour, 5-10 minute break.\nQuestions\nRaise hand or write down and ask during breaks."
  },
  {
    "objectID": "slides/outline.html#course-objectives",
    "href": "slides/outline.html#course-objectives",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Course Objectives",
    "text": "Course Objectives\n\n\n\n\nProvide an overview of GIS concepts and data types\nIntroduce ArcGIS Pro (interface, projects, resources)\nDemonstrate common spatial operations and tools\nWork through an example of programmatic GIS (python)\nExplore a variety of other tools and integrations"
  },
  {
    "objectID": "slides/outline.html#workshop-instructors",
    "href": "slides/outline.html#workshop-instructors",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Workshop Instructors",
    "text": "Workshop Instructors\n\n\n\n\n\nBenjamin Tjepkes\n\nGraduate Student\nGeography\n\n\nWesley Fitzsimmons\n\nGraduate Student\nFisheries and Wildlife"
  },
  {
    "objectID": "slides/outline.html#looking-for-gis-courses",
    "href": "slides/outline.html#looking-for-gis-courses",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Looking for GIS Courses?",
    "text": "Looking for GIS Courses?\n\nLearn More: Geography Course Offerings\n\nThe MU Geography Department has several:\n\nCartography\nIntro GIS\nAdvanced GIS\nSpatial Analysis\nRemote Sensing"
  },
  {
    "objectID": "slides/outline.html#what-is-gis",
    "href": "slides/outline.html#what-is-gis",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "What is GIS?",
    "text": "What is GIS?\n\n\n\n\nStarted simply as a way to store and query spatial data\nCapable ecosystem of tools & techniques"
  },
  {
    "objectID": "slides/outline.html#why-learn-gis",
    "href": "slides/outline.html#why-learn-gis",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Why Learn GIS?",
    "text": "Why Learn GIS?\n\n\n\n\nEverywhere is somewhere\nAdds another dimension to data\nJOBS!"
  },
  {
    "objectID": "slides/outline.html#spatial-data-types",
    "href": "slides/outline.html#spatial-data-types",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Spatial Data Types",
    "text": "Spatial Data Types\nHow the surface of the Earth is represented digitally\n\nSpatial coordinates = X, Y, sometimes Z\nTypes of spatial data models (types)\n\nVector\nRaster\nNetworks\n\nMany file formats / extensions for each\n\nExamples: .tiff, .shp, .gdb"
  },
  {
    "objectID": "slides/outline.html#vector-data",
    "href": "slides/outline.html#vector-data",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Vector Data",
    "text": "Vector Data\nRepresents space as points, lines, and polygons\n\nSource: Carto"
  },
  {
    "objectID": "slides/outline.html#vector-file-formats",
    "href": "slides/outline.html#vector-file-formats",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Vector File Formats",
    "text": "Vector File Formats"
  },
  {
    "objectID": "slides/outline.html#raster-data",
    "href": "slides/outline.html#raster-data",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Raster Data",
    "text": "Raster Data\nRepresents space as a grid of pixels\n\nSource: Carto\nLearn more: Navigation"
  },
  {
    "objectID": "slides/outline.html#raster-file-formats",
    "href": "slides/outline.html#raster-file-formats",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Raster File Formats",
    "text": "Raster File Formats"
  },
  {
    "objectID": "slides/outline.html#data-type-considerations",
    "href": "slides/outline.html#data-type-considerations",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Data Type Considerations",
    "text": "Data Type Considerations\n\n\n\nRaster is faster, but vector seems more correcter\n\nSpatial data files do their best to represent the world\nAccuracy needs will depend on each use case\n\nMapping an entire state vs. a single forest stand\nEach sensor and GPS receiver will vary"
  },
  {
    "objectID": "slides/outline.html#projections-aka-crs",
    "href": "slides/outline.html#projections-aka-crs",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Projections (aka CRS)",
    "text": "Projections (aka CRS)\nRepresenting a 3D sphere on a 2D surface\n\nOften the most confusing part of introductory GIS\nNo perfect projection exists (prioritize for needs)\nDifferent regions and states have their own projections\nMany software have on-the-fly projection\nLayers need to have same CRS for spatial operations"
  },
  {
    "objectID": "slides/outline.html#crs-nomenclature",
    "href": "slides/outline.html#crs-nomenclature",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "CRS Nomenclature",
    "text": "CRS Nomenclature\nDifferent ways to reference a CRS.\n\nEnglish Name\nWKT ~ Well Known Text\nEPSG\nPROJ.4"
  },
  {
    "objectID": "slides/outline.html#software-programs",
    "href": "slides/outline.html#software-programs",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Software & Programs",
    "text": "Software & Programs\n\n\nProprietary\n\nArcGIS Pro\nCadcorp\nMAPublisher\nCarto\n\n\nOpen-Source*\n\nQGIS\nGRASS GIS\nGeoDa\nR / Python / Julia\n\n*Many open-source software have paid tiers for extending functionality or rely on paid services for sharing"
  },
  {
    "objectID": "slides/outline.html#web-geospatial-tools",
    "href": "slides/outline.html#web-geospatial-tools",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Web Geospatial Tools",
    "text": "Web Geospatial Tools\n\nArcGIS Online\nGoogle Earth Engine\nLeaflet\nMapbox\nMango Map\nFelt"
  },
  {
    "objectID": "slides/outline.html#common-file-types",
    "href": "slides/outline.html#common-file-types",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Common File Types",
    "text": "Common File Types\nHow spatial data and attributes are stored and transferred"
  },
  {
    "objectID": "slides/outline.html#apps-for-field-collection",
    "href": "slides/outline.html#apps-for-field-collection",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Apps for Field Collection",
    "text": "Apps for Field Collection\n\nEsri: Esri Field Maps – ArcGIS Online – ArcGIS Pro\nQGIS: QField or Mergin Maps – QGIS\nAvenza Maps – Works with multiple programs"
  },
  {
    "objectID": "slides/outline.html#why-use-scripting-for-gis",
    "href": "slides/outline.html#why-use-scripting-for-gis",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Why use scripting for GIS?",
    "text": "Why use scripting for GIS?\n\nAllows for reproducible science and workflows\n\nSupplementary material for manuscripts\n\nTurns repetitive tasks into simple tools\nSome tools are only available in the coding interface\nIntegrates with other tools and methods\n\nModules, extensions, APIs\nData wrangling and visualization"
  },
  {
    "objectID": "slides/outline.html#why-use-r-for-spatial-analysis",
    "href": "slides/outline.html#why-use-r-for-spatial-analysis",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Why Use R for Spatial Analysis?",
    "text": "Why Use R for Spatial Analysis?\n\n\n\n\nAll the cool researchers are using it\n\nlibrary(sf)"
  },
  {
    "objectID": "slides/outline.html#contact-resources",
    "href": "slides/outline.html#contact-resources",
    "title": "GIS for Fisheries and Wildlife Sciences",
    "section": "Contact & Resources",
    "text": "Contact & Resources\nReach out with inquiries:\n\nBenjamin Tjepkes ~ bwtbgm@missouri.edu\nWesley Fitzsimmons ~ waf8xt@missouri.edu\n\nWorkshop Resources:\nTinyURL\n\n\n\n\n© The Authors | 2024.03.20"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "GISGeography ~ All things GIS.\nGIS Term Dictionary ~ Various and general GIS definitions.\nGDAL ~ File formats and conversions.\nPennState GEOG 486 ~ Cartography and spatial data visualization."
  },
  {
    "objectID": "resources.html#general-gis",
    "href": "resources.html#general-gis",
    "title": "Resources",
    "section": "",
    "text": "GISGeography ~ All things GIS.\nGIS Term Dictionary ~ Various and general GIS definitions.\nGDAL ~ File formats and conversions.\nPennState GEOG 486 ~ Cartography and spatial data visualization."
  },
  {
    "objectID": "resources.html#arcgis-pro",
    "href": "resources.html#arcgis-pro",
    "title": "Resources",
    "section": "ArcGIS Pro",
    "text": "ArcGIS Pro\n\nEsri Spatial Statistics Resources ~ Tutorials on using spatial analysis tools in the Esri environment.\nEsri Training ~ Main education and training page for ArcGIS suite of products."
  },
  {
    "objectID": "resources.html#projections",
    "href": "resources.html#projections",
    "title": "Resources",
    "section": "Projections",
    "text": "Projections\n\nEPSG Projections ~ Projection codes and help selecting projections."
  },
  {
    "objectID": "resources.html#spatial-data-in-r",
    "href": "resources.html#spatial-data-in-r",
    "title": "Resources",
    "section": "Spatial Data in R",
    "text": "Spatial Data in R\n\nMapping in ggplot with sf ~ R-Spatial page on sf and ggplot.\nSpatial Data Science Book ~ Ebook on all things spatial data science in R.\nGeocomputation with R ~ Another ebook on geostatisitcs in R.\nR-ArcGIS Bridge ~ Overview of R-ArcGIS Bridge capabilities.\nCRAN Spatial Task View ~ Contributed packages dealing with spatial data on CRAN."
  },
  {
    "objectID": "resources.html#data-sources",
    "href": "resources.html#data-sources",
    "title": "Resources",
    "section": "Data Sources",
    "text": "Data Sources\n\nlterdatasampler ~ R package with sample LTER data\nOpen Land Map ~ Data portal to the world’s environmental data\nEarth Map ~ Tool for quick multi-temporal environmental and climate analysis"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "This workshop, GIS for Fisheries and Wildlife Sciences, provides a general introduction to GIS workflows and programming in the natural sciences. Topics will cover common data types, spatial operations, data visualization, and other tools used across the breadth of wildlife and fisheries research. No prior GIS experience is assumed, but might be helpful when following the more advanced portions of this workshop. High-level coding languages (e.g., Python and R) will also be included."
  },
  {
    "objectID": "index.html#workshop-description",
    "href": "index.html#workshop-description",
    "title": "Getting Started",
    "section": "",
    "text": "This workshop, GIS for Fisheries and Wildlife Sciences, provides a general introduction to GIS workflows and programming in the natural sciences. Topics will cover common data types, spatial operations, data visualization, and other tools used across the breadth of wildlife and fisheries research. No prior GIS experience is assumed, but might be helpful when following the more advanced portions of this workshop. High-level coding languages (e.g., Python and R) will also be included."
  },
  {
    "objectID": "index.html#workshop-objectives",
    "href": "index.html#workshop-objectives",
    "title": "Getting Started",
    "section": "Workshop Objectives",
    "text": "Workshop Objectives\nThe primary objective of this workshop is provide exposure to a variety of GIS systems available for working with spatial data for fisheries and wildlife projects.\n\nTo provide an overview of GIS concepts and data types.\nTo introduce ArcGIS Pro (interface, projects, resources).\nTo demonstrate common spatial operations and tools.\nTo work through an example of programmatic GIS (Python).\nTo explore a variety of other tools and integrations (e.g., R)."
  },
  {
    "objectID": "index.html#data-downloads",
    "href": "index.html#data-downloads",
    "title": "Getting Started",
    "section": "Data Downloads",
    "text": "Data Downloads\nStart by downloading workshop files here: Workshop Files Via OneDrive.\n\nData used for this workshop came from the following:  Eklund, Daniel A.; Donner, Deahn M.; Beck, Albert J.; Rugg, David J. 2023. Beaver colonization events on managed streams in the Chequamegon-Nicolet National Forest, Wisconsin. Fort Collins, CO: Forest Service Research Data Archive. https://doi.org/10.2737/RDS-2023-0019"
  },
  {
    "objectID": "index.html#workshop-schedule",
    "href": "index.html#workshop-schedule",
    "title": "Getting Started",
    "section": "Workshop Schedule",
    "text": "Workshop Schedule\nThis workshop is set to take approximately 4 hours to complete and will cover a diverse range of GIS topics. The following schedule outlines the general sections for each topic covered.\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\n1. GIS Concepts\n\n\nData types, file formats, projections, software, and tools.\n\n\n\n\n2. Intro to ArcGIS Pro\n\n\nInterface, catalog, adding data, symbology, layouts, tools.\n\n\n\n\n3. Scripting in ArcGIS Pro\n\n\nJupyter, ArcPy, visualization, and workflows.\n\n\n\n\n4. Spatial Data in R\n\n\nVector and raster packages, spatial operations, and cartography.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "gis-concepts.html",
    "href": "gis-concepts.html",
    "title": "1. GIS Concepts",
    "section": "",
    "text": "The tool that we use to capture, store, process, analyze, and visualize spatial information.\nHelps us understand and assess patterns in spatial locations and attributes about those locations.\n\n\n\n\n\nThe study of geographic phenomena, spatial relationships, and patterns using computational techniques and spatial analysis tools.\nIntegrates principles from geography, computer science, mathematics, and other disciplines to analyze and interpret spatial data, aiding in decision-making processes across various fields.\n\n\n\n\n\n\nSpatial Analysis: GIS enables spatial analysis techniques that help in understanding the spatial patterns and relationships within natural resource datasets. Analyzing habitat suitability, identifying biodiversity hotspots, assessing landscape connectivity, and evaluating environmental impacts.\nResource Management: GIS facilitates the management of natural resources by providing tools for inventory, monitoring, and planning. It allows for the integration of various data sources, such as satellite imagery, field surveys, and remote sensing data, to assess the condition of ecosystems, track changes over time, and develop sustainable management strategies.\nDecision Support: GIS serves as a decision support tool for natural resource management by enabling stakeholders to visualize complex spatial data and model different scenarios. It helps in prioritizing conservation efforts, allocating resources efficiently, and evaluating the potential impacts of alternative management actions.\nJOBS!"
  },
  {
    "objectID": "gis-concepts.html#introduction",
    "href": "gis-concepts.html#introduction",
    "title": "1. GIS Concepts",
    "section": "",
    "text": "The tool that we use to capture, store, process, analyze, and visualize spatial information.\nHelps us understand and assess patterns in spatial locations and attributes about those locations.\n\n\n\n\n\nThe study of geographic phenomena, spatial relationships, and patterns using computational techniques and spatial analysis tools.\nIntegrates principles from geography, computer science, mathematics, and other disciplines to analyze and interpret spatial data, aiding in decision-making processes across various fields.\n\n\n\n\n\n\nSpatial Analysis: GIS enables spatial analysis techniques that help in understanding the spatial patterns and relationships within natural resource datasets. Analyzing habitat suitability, identifying biodiversity hotspots, assessing landscape connectivity, and evaluating environmental impacts.\nResource Management: GIS facilitates the management of natural resources by providing tools for inventory, monitoring, and planning. It allows for the integration of various data sources, such as satellite imagery, field surveys, and remote sensing data, to assess the condition of ecosystems, track changes over time, and develop sustainable management strategies.\nDecision Support: GIS serves as a decision support tool for natural resource management by enabling stakeholders to visualize complex spatial data and model different scenarios. It helps in prioritizing conservation efforts, allocating resources efficiently, and evaluating the potential impacts of alternative management actions.\nJOBS!"
  },
  {
    "objectID": "gis-concepts.html#spatial-data-types",
    "href": "gis-concepts.html#spatial-data-types",
    "title": "1. GIS Concepts",
    "section": "Spatial Data Types",
    "text": "Spatial Data Types\n\nWhat are spatial data?\nHow the surface of the Earth is represented digitally.\n\nSpatial coordinates = X, Y, sometimes Z\nTypes of spatial data models (types)\n\nVector\nRaster\nNetworks\nLiDAR (point clouds)\n\nMany file formats / extensions for each\n\nExamples: .tiff, .shp, .gdb\n\n\n\n\nVector\nRepresents space as points, lines, and polygons.\n\nPoints – single vertex\nLines – two or more vertices\nPolygon – three or more vertices with the last vertex equal to the first\n\n\n\n\nVector data model example. Source: Carto\n\n\n\nCommon Vector Data Types:\nMore than 80 different vector file types available across software and systems!\n\nNetCDF\nShapefile\nGeoJSON\nEsri Geodatabase Feature Class\nKML\n\n\n\n\nRaster\nRepresents space as a grid of pixels or cells.\n\n\n\nRaster data model example. Source: Carto\n\n\n\nCommon Raster Data Types:\n\nImagine IMG\nGeoTIFF & Cloud Optimized GeoTIFF\nnetCDG\nCRF (Cloud raster format)\nBAG (Bathymetric Attributed Grid)\n\n\n\n\nData Type Considerations\n\nRaster is faster, but vector seems more correcter. - Old GIS Adage\n\nSpatial data files do their best to represent the world. Accuracy needs will depend on each use case. Mapping an entire state vs. a single forest stand. Each sensor and GPS receiver will vary.\n\nRaster Advantages:\n\nContinuous Representation: Raster data models are well-suited for representing continuous phenomena, such as elevation, temperature, and precipitation.\nEfficient Storage: Raster datasets can be more compactly stored than vector datasets, especially for large continuous areas.\nAnalytical Capabilities: Raster data supports various spatial analysis techniques, such as surface analysis, proximity analysis, and interpolation, enabling detailed quantitative analysis\n\n\n\nRaster Disadvantages:\n\nLoss of Detail: Raster datasets may lose detail when representing complex geometries or sharp boundaries, leading to generalization or smoothing of features.\nLarge File Sizes: High-resolution raster datasets can result in large file sizes, which may require significant storage space and computing resources for processing and analysis.\nLimited Attribute Information: Raster data typically stores attribute information at the pixel level, which may limit the types of attribute analysis that can be performed\n\n\n\nVector Advantages:\n\nPrecise Representation: Vector data models accurately represent discrete features with well-defined boundaries, making them suitable for representing infrastructure, boundaries, and administrative units.\nCompact Storage: Vector datasets can efficiently store attribute information associated with spatial features, enabling detailed attribute analysis and queries.\nTopology Support: Vector data models support topological relationships between features, such as connectivity and adjacency, which facilitate spatial analysis and data integrity checks.\nFlexible Editing: Vector data can be easily edited and updated, allowing for precise modifications to individual features or attributes without affecting neighboring features.\n\n\n\nVector Disadvantages:\n\nComplex Geometries: Vector data may struggle to represent continuous phenomena or complex geometries accurately, leading to oversimplification or data loss.\nIncreased Storage Requirements: Vector datasets can require more storage space compared to raster datasets, especially for datasets with complex geometries or extensive attribute information.\n\n\n\n\nA Note on Shapefiles\nStop Using Shapefiles: http://switchfromshapefile.org/\nWhile shapefiles are common and widely supported, there are several downsides:\n\nMulti-file format causes sharing issues\nAttribute (column) names limited to 10 characters\nNo more than 255 total attributes\nTotal size limit of 2 GB\n\n\nAlternatives for Consideration\n\nOGC GeoPackage \nGeoJSON\nOGC GML\nOGC KML\nEsri GeoDatabase"
  },
  {
    "objectID": "gis-concepts.html#coordinate-reference-systems-crs",
    "href": "gis-concepts.html#coordinate-reference-systems-crs",
    "title": "1. GIS Concepts",
    "section": "Coordinate Reference Systems (CRS)",
    "text": "Coordinate Reference Systems (CRS)\n\nOften the most confusing part of introductory GIS\nLayers need to have same CRS for spatial operations\n\n\nGeographic CRS\nRepresenting a 3D sphere as a 3D model\n\nGeographic coordinate reference systems identify any location on the Earth’s surface using two values — longitude and latitude\n\nLongitude = angular distance East-West from the Prime Meridian plane\nLatitude = angular distance North or South of the equatorial plane\n\n\n\n\nProjected CRS\nRepresenting a 3D sphere on a 2D surface\n\nNo perfect projection exists (prioritize for needs)\nDifferent regions and states have their own projections\nMany software have on-the-fly projection\n\n\n\n\n\n\n\n\n\n\nMercator\n\n\n\n\n\n\n\nWGS84\n\n\n\n\n\nMollweide (Equal Area)\n\n\n\n\n\nExplore more projection info here: https://www.geo-projections.com/\n\n\nCRS Nomenclature\nCoordinate reference systems have various names or ways of referring to them in GIS software. This is especially prominent in programmatic GIS where a GUI dropdown menu of projections is not an option. See more here: https://epsg.io/.\n\nEnglish Name\nNorth American Datum 1983\n\n\nWKT ~ Well Known Text\nGEOGCS[\"NAD83\",\n    DATUM[\"North_American_Datum_1983\",\n        SPHEROID[\"GRS 1980\",6378137,298.257222101],\n        TOWGS84[0,0,0,0,0,0,0]],\n    PRIMEM[\"Greenwich\",0,\n        AUTHORITY[\"EPSG\",\"8901\"]],\n    UNIT[\"degree\",0.0174532925199433,\n        AUTHORITY[\"EPSG\",\"9122\"]],\n    AUTHORITY[\"EPSG\",\"4269\"]]\n\n\nWKID ~ Well Known Identifier (ESRI)\nGEOGCS[\"GCS_North_American_1983\",\n    DATUM[\"D_North_American_1983\",\n        SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],\n    PRIMEM[\"Greenwich\",0.0],\n    UNIT[\"Degree\",0.0174532925199433]]\n\n\nEPSG\n4269\n\n\nPROJ.4\n+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs +type=crs"
  },
  {
    "objectID": "gis-concepts.html#software-programs",
    "href": "gis-concepts.html#software-programs",
    "title": "1. GIS Concepts",
    "section": "Software & Programs",
    "text": "Software & Programs\nMany different types and levels of GIS software available. See more examples here.\n\nProprietary\n\nArcGIS Pro\nCadcorp\nMAPublisher\nCarto\n\n\n\nOpen-Source\n\nQGIS\nGRASS GIS\nSAGA GIS\nGeoDa\nR / Python / Julia\n\n\n\nOther Web GIS Tools\n\nArcGIS Online\nGoogle Earth Engine\nLeaflet\nMapbox\nMango Map\nFelt"
  },
  {
    "objectID": "gis-concepts.html#field-collection",
    "href": "gis-concepts.html#field-collection",
    "title": "1. GIS Concepts",
    "section": "Field Collection",
    "text": "Field Collection\n\nGPS Recievers\nGPS receivers range in both price and accuracy.\n\nRecreational Grade\nRecreational grade GPS receivers are sold at most box stores and at many sporting goods and camping stores. They are also available widely through Internet retailers. These units are the least expensive grade and are generally accurate to within +/- 25 feet (7.6 meters). These receivers run in the $100 to $600 range and are the type most often purchased by the general public.\n\n\nMapping Grade\nMapping grade GPS receivers are generally sold by “high end” and licensed resellers. These GPS receivers are typically less user-friendly than the recreational GPS, and they cost significantly more. Mapping grade GPS are more accurate than recreational units, commonly to within a meter (~3 feet).\n\n\nSurvey Grade\nSurvey grade GPS receivers are the most accurate and the most expensive. They are accurate to within a centimeter and can cost in the tens of thousands of dollars.\n\n\n\nMobile Applications\nMany apps available for field data collection.\n\nEsri Field Maps (for Esri)\n\nIntegrates with ArcGIS Online and ArcGIS Pro\nBoth Android and iOS support\n\n\n\nQField or Mergin Maps (for QGIS)\n\nIntegrates with QGIS Cloud environment\n\n\n\nAvenza Maps (for anything)\n\nWorks with multiple programs\n\nCan be used with external GPS receivers (Bad Elf, Garmin GLO), else uses the internal GPS chip."
  },
  {
    "objectID": "gis-concepts.html#spatial-operations",
    "href": "gis-concepts.html#spatial-operations",
    "title": "1. GIS Concepts",
    "section": "Spatial Operations",
    "text": "Spatial Operations\nSpatial operations in GIS refer to a set of analytical techniques and functions used to manipulate, analyze, and derive new spatial information from existing geographic datasets. These operations involve the manipulation of spatial data to answer specific questions, identify patterns, and support decision-making processes.\nTobler’s First Law of Geography, often summarized as “Everything is related to everything else, but near things are more related than distant things,” has profound implications for spatial analysis and GIS operations. The law essentially suggests that spatial relationships are influenced by distance, with closer features or locations being more strongly related or similar than those farther apart.\nMany GIS operations and spatial analysis techniques are inherently based on Tobler’s First Law of Geography, as they leverage proximity and spatial relationships to derive meaningful insights and make informed decisions.\n\nExtraction\n\nClip\nThis operation involves extracting a portion of one layer based on the extent of another layer. It retains only those features from the input layer that fall within the spatial extent of the clip layer.\n\n\n\nSelect\nSelecting features involves choosing specific geographic features from a layer based on certain criteria, such as attribute values or spatial relationships.\n\n\nSplit\nSplitting divides one or more input features into separate features based on a specified line or polygon boundary.\n\n\nSplit By Attributes\nThis operation divides features based on attribute values. It creates separate output datasets for each unique attribute value.\n\n\n\nOverlay\n\nErase\nErase removes portions of one layer that overlap with another layer, leaving only the areas where the two layers do not overlap.\n\n\n\nIdentity\nIdentity produces a new layer that preserves the geometries of both input layers. It assigns attributes from both layers to the output, and where they overlap, it retains the attributes of both layers.\n\n\n\nIntersect\nIntersect creates a new layer that contains only the areas where features from input layers overlap. The output retains the attributes from both input layers.\n\n\n\nSpatial Join\nSpatial Join combines attributes from two layers based on their spatial relationship. It creates a new layer with attributes from both input layers, using a specified spatial relationship (e.g., intersect, contain, within).\n\n\nUnion\nUnion combines the geometries and attributes of two or more input layers to create a new layer that represents the geometric and attribute combination of all input layers.\n\n\n\nUpdate\nUpdate operation involves modifying attributes or geometries of features in a layer based on the attributes or geometries of another layer.\n\n\n\n\nProximity\n\nNear\nNear identifies features in one layer that are closest to features in another layer. It calculates distances between features and reports the nearest feature(s) based on specified criteria.\n\n\nBuffer\nBuffering is a spatial operation in GIS that involves creating a zone or area around a geographic feature, typically represented as a point, line, or polygon. This zone is defined by a specified distance or buffer radius.\n\n\n\n\nOther\n\nRe-project\nReprojection involves transforming geographic data from one coordinate system to another, typically to match the coordinate system of other data or to facilitate analysis.\n\n\nDissolve\nDissolve combines adjacent polygons or features that share a common attribute value into a single feature. It merges geometries and aggregates attributes based on the specified dissolve field.\n\n\nSummarize Within\nSummarize Within is a spatial operation in GIS that involves aggregating data from one layer based on the spatial relationship with features from another layer. It calculates statistics or aggregates attributes of features within the boundaries of other features."
  },
  {
    "objectID": "intro-to-arcgis-pro.html",
    "href": "intro-to-arcgis-pro.html",
    "title": "2. Intro to ArcGIS Pro",
    "section": "",
    "text": "ArcGIS Pro is a comprehensive GIS application that enables users to create, manage, analyze, and share spatial data in both 2D and 3D environments. It serves as a central hub for all your GIS work, providing tools for data visualization, geoprocessing, cartography, and more.\nWhether you’re a GIS professional, a researcher, or a student, ArcGIS Pro offers a versatile platform to explore, analyze, and communicate spatial information.\n\n\nOne of the many benefits of ArcGIS Pro is that is provides integrations with other Esri products, such as ArcGIS Online."
  },
  {
    "objectID": "intro-to-arcgis-pro.html#introduction",
    "href": "intro-to-arcgis-pro.html#introduction",
    "title": "2. Intro to ArcGIS Pro",
    "section": "",
    "text": "ArcGIS Pro is a comprehensive GIS application that enables users to create, manage, analyze, and share spatial data in both 2D and 3D environments. It serves as a central hub for all your GIS work, providing tools for data visualization, geoprocessing, cartography, and more.\nWhether you’re a GIS professional, a researcher, or a student, ArcGIS Pro offers a versatile platform to explore, analyze, and communicate spatial information.\n\n\nOne of the many benefits of ArcGIS Pro is that is provides integrations with other Esri products, such as ArcGIS Online."
  },
  {
    "objectID": "intro-to-arcgis-pro.html#licensing",
    "href": "intro-to-arcgis-pro.html#licensing",
    "title": "2. Intro to ArcGIS Pro",
    "section": "Licensing",
    "text": "Licensing\nThere are 3 types or categories of ArcGIS Pro licenses available. In addition to the base installation of Pro, there are also Extensions that can provided extended functionality.\n\nArcGIS Pro Single Use License:\n\nA Single Use License is assigned to a single machine and is tied to a specific ArcGIS Pro installation.\nIt’s ideal for individual users or small teams who require exclusive access to ArcGIS Pro on a dedicated workstation.\nThis license type is perpetual, meaning it does not expire, but it is only valid for the version of ArcGIS Pro it is assigned to.\n\n\n\nArcGIS Pro Named User License:\n\nA Named User License is assigned to individual users and requires authentication through ArcGIS Online or ArcGIS Enterprise.\nNamed User Licenses are typically associated with an organization’s subscription to ArcGIS Online or ArcGIS Enterprise.\nUsers can access ArcGIS Pro from any machine connected to the internet, providing flexibility and mobility.\nThis license type allows for easy collaboration, sharing, and access to additional ArcGIS Online services and content.\n\n\n\nArcGIS Pro Concurrent Use License:\n\nA Concurrent Use License allows multiple users to share a pool of licenses hosted on a license manager.\nUsers can access ArcGIS Pro from any machine connected to the network where the license manager is installed.\nThe number of concurrent licenses available is determined by the license administrator and can be adjusted based on usage requirements.\nThis license type is suitable for organizations with a large number of users who may not require full-time access to ArcGIS Pro.\n\n\n\nArcGIS Pro Extensions:\n\nArcGIS Pro offers various extensions that provide additional functionality beyond the core software.\nExamples of extensions include Spatial Analyst, 3D Analyst, Geostatistical Analyst, and Image Analyst.\nExtensions can be purchased separately and added to existing ArcGIS Pro licenses as needed, allowing users to customize their workflows based on specific requirements."
  },
  {
    "objectID": "intro-to-arcgis-pro.html#interface",
    "href": "intro-to-arcgis-pro.html#interface",
    "title": "2. Intro to ArcGIS Pro",
    "section": "Interface",
    "text": "Interface\n\nCatalog\n\n\n\nArcGIS Catalog Structure.\n\n\n\n\nGeodatabase Structure\n\n\n\nGeodatabase structure.\n\n\n\n\nGeoprocessing Tools\n\n\n\nGeoprocessing Pane\n\n\n\n\n\nGeoprocessing Pane\n\n\n\n\nCartography & Map Layouts\n\n\n\nArcGIS Pro Layout"
  },
  {
    "objectID": "scripting-in-arcgis-pro.html",
    "href": "scripting-in-arcgis-pro.html",
    "title": "3. Scripting in ArcGIS Pro",
    "section": "",
    "text": "Programmatic GIS refers to the practice of using programming languages and scripts to perform geospatial analysis, automate GIS tasks, and develop custom geospatial applications. Rather than relying solely on graphical user interfaces (GUIs) of GIS software, programmatic GIS empowers users to harness the full capabilities of GIS through code.\nWhile the GUI is a vital part of GIS and creates a venue for speedy learning, it can be very slow (esp. in ArcGIS Pro) and does not make sense for large scope projects or repetitive tasks.\n\n\n\n\nAllows for reproducible science and workflows\n\nSupplementary material for manuscripts\n\nTurns repetitive tasks into simple tools\nSome tools are only available in the coding interface\nIntegrates with other tools and methods\n\nModules, extensions, APIs\nData wrangling and visualization\n\n\n\n\n\nPython is a versatile and powerful programming language widely used in various fields, including web development, data science, artificial intelligence, and, importantly, GIS.\nWhile R is widely used across academia, many private industries use Python as the standard language for programmatic GIS. Python is the primary coding language used in ArcGIS Pro, along with Arcade (Esri’s proprietary language).\nimport arcpy\n\n\n\nJupyter Notebooks are interactive computing environments that allow you to combine live code, equations, visualizations, and narrative text all in one document. They support multiple programming languages, including Python, R, and Julia, making them versatile tools for various data analysis tasks.\nJupyter Notebooks is installed as part of the ArcGIS Pro installation process or added later using the ArcGIS Pro package manager. Once installed, you can launch Jupyter Notebooks directly from the ArcGIS Pro interface or a Python command prompt.\n\n\n\nJupyter Notebook within ArcGIS Pro"
  },
  {
    "objectID": "scripting-in-arcgis-pro.html#introduction",
    "href": "scripting-in-arcgis-pro.html#introduction",
    "title": "3. Scripting in ArcGIS Pro",
    "section": "",
    "text": "Programmatic GIS refers to the practice of using programming languages and scripts to perform geospatial analysis, automate GIS tasks, and develop custom geospatial applications. Rather than relying solely on graphical user interfaces (GUIs) of GIS software, programmatic GIS empowers users to harness the full capabilities of GIS through code.\nWhile the GUI is a vital part of GIS and creates a venue for speedy learning, it can be very slow (esp. in ArcGIS Pro) and does not make sense for large scope projects or repetitive tasks.\n\n\n\n\nAllows for reproducible science and workflows\n\nSupplementary material for manuscripts\n\nTurns repetitive tasks into simple tools\nSome tools are only available in the coding interface\nIntegrates with other tools and methods\n\nModules, extensions, APIs\nData wrangling and visualization\n\n\n\n\n\nPython is a versatile and powerful programming language widely used in various fields, including web development, data science, artificial intelligence, and, importantly, GIS.\nWhile R is widely used across academia, many private industries use Python as the standard language for programmatic GIS. Python is the primary coding language used in ArcGIS Pro, along with Arcade (Esri’s proprietary language).\nimport arcpy\n\n\n\nJupyter Notebooks are interactive computing environments that allow you to combine live code, equations, visualizations, and narrative text all in one document. They support multiple programming languages, including Python, R, and Julia, making them versatile tools for various data analysis tasks.\nJupyter Notebooks is installed as part of the ArcGIS Pro installation process or added later using the ArcGIS Pro package manager. Once installed, you can launch Jupyter Notebooks directly from the ArcGIS Pro interface or a Python command prompt.\n\n\n\nJupyter Notebook within ArcGIS Pro"
  },
  {
    "objectID": "scripting-in-arcgis-pro.html#basics-of-python-programming",
    "href": "scripting-in-arcgis-pro.html#basics-of-python-programming",
    "title": "3. Scripting in ArcGIS Pro",
    "section": "Basics of Python Programming",
    "text": "Basics of Python Programming\n\nData Classes and Structures\nPython provides several built-in data classes and structures that allow developers to organize and manipulate data efficiently.\n\nNumbers\nInteger (int): Integers represent whole numbers without any decimal point.\nFloat (float): Floats represent real numbers with a decimal point.\n# Example of integers\nx = 5\ny = -10\nz = 0\n\nprint(x, y, z)  # Output: 5 -10 0\n\n\n# Example of floats\na = 3.14\nb = -0.5\nc = 2.0\n\nprint(a, b, c)  # Output: 3.14 -0.5 2.0\n\n\nStrings\nString (str): Strings are sequences of characters, enclosed within single quotes (’ ’) or double quotes (” “).\n# Example of strings\nname = \"Alice\"\nmessage = 'Hello, world!'\n\nprint(name)     # Output: Alice\nprint(message)  # Output: Hello, world!\n\n\nBoolean\nBoolean (bool): Booleans represent truth values, either True or False.\n# Example of booleans\nis_valid = True\nis_greater = False\n\nprint(is_valid)    # Output: True\nprint(is_greater)  # Output: False\n\n\nLists\nList: Lists are ordered collections of items, which can be of any data type. Lists are mutable, meaning they can be changed after creation.\n# Example of lists\nnumbers = [1, 2, 3, 4, 5]\nfruits = ['apple', 'banana', 'orange']\n\nprint(numbers)  # Output: [1, 2, 3, 4, 5]\nprint(fruits)   # Output: ['apple', 'banana', 'orange']\n\n\nTuples\nTuple: Tuples are similar to lists, but they are immutable once created.\n# Example of tuples\npoint = (10, 20)\ncolors = ('red', 'green', 'blue')\n\nprint(point)   # Output: (10, 20)\nprint(colors)  # Output: ('red', 'green', 'blue')\n\n\nDictionaries\nDictionary (dict): Dictionaries are unordered collections of key-value pairs. Each key must be unique.\n# Example of dictionaries\nperson = {'name': 'Alice', 'age': 30, 'city': 'New York'}\ngrades = {'math': 90, 'science': 85, 'history': 88}\n\nprint(person)  # Output: {'name': 'Alice', 'age': 30, 'city': 'New York'}\nprint(grades)  # Output: {'math': 90, 'science': 85, 'history': 88}\n\n\nSets\nSet: Sets are unordered collections of unique elements. They are useful for mathematical operations like union, intersection, etc.\n# Example of sets\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\n\nprint(set1)  # Output: {1, 2, 3, 4, 5}\nprint(set2)  # Output: {4, 5, 6, 7, 8}"
  },
  {
    "objectID": "scripting-in-arcgis-pro.html#common-geospatial-packages",
    "href": "scripting-in-arcgis-pro.html#common-geospatial-packages",
    "title": "3. Scripting in ArcGIS Pro",
    "section": "Common Geospatial Packages",
    "text": "Common Geospatial Packages\nPython has both base and extended functionality where the latter is provided by external packages (i.e., modules) that can be installed, and then imported into our workspace."
  },
  {
    "objectID": "scripting-in-arcgis-pro.html#python-in-arcgis",
    "href": "scripting-in-arcgis-pro.html#python-in-arcgis",
    "title": "3. Scripting in ArcGIS Pro",
    "section": "Python in ArcGIS",
    "text": "Python in ArcGIS\narcpy is the main python module to interact with the ArcGIS ecosystem and will be the focus of our exploration today.\nimport arcpy\n\nroads = \"c:/base/data.gdb/roads\"\noutput = \"c:/base/data.gdb/roads_Buffer\"\n\n# Run Buffer using the variables set above and pass the remaining \n# parameters in as strings\narcpy.Buffer_analysis(roads, output, \"distance\", \"FULL\", \"ROUND\", \"NONE\")\n\nBest Practices and Tips:\n\n1. Writing Efficient and Readable arcpy Scripts:\n\nUse meaningful variable names and comments to enhance code readability.\nBreak down complex tasks into smaller, modular functions.\nOptimize arcpy scripts by minimizing unnecessary loops and operations.\n\n\n\n2. Managing Memory and Resources:\n\nRelease resources and locks on datasets using del statements and arcpy.ClearWorkspaceCache_management().\nUse context managers (with statements) for managing arcpy environments and cursors to ensure proper resource cleanup.\n\n\n\n3. Documenting Code and Workflows:\n\nDocument arcpy scripts with clear and concise comments explaining the purpose of each section and important steps.\nMaintain separate documentation files or READMEs detailing script usage, input/output data, and dependencies.\n\n\n\n4. Debugging and Troubleshooting arcpy Scripts:\n\nUse print statements and logging to debug arcpy scripts.\nHandle errors gracefully using try-except blocks to prevent script failures.\nUtilize arcpy’s error handling mechanisms to identify and resolve issues.\n\n\n\n5. Version Control and Collaboration:\n\nUse version control systems (e.g., Git) to track changes and collaborate with team members on arcpy projects.\nEstablish coding standards and conventions for consistent arcpy script development within the team."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "The full presentation can be viewed interactively below. Note that any resources associated with each slide are linked at the bottom. To download a PDF version of this presentation, click here.\n\nNote: To enter full screen view, click into the slide deck and hit the F key on your keyboard."
  },
  {
    "objectID": "slides.html#presentation-slides",
    "href": "slides.html#presentation-slides",
    "title": "Slides",
    "section": "",
    "text": "The full presentation can be viewed interactively below. Note that any resources associated with each slide are linked at the bottom. To download a PDF version of this presentation, click here.\n\nNote: To enter full screen view, click into the slide deck and hit the F key on your keyboard."
  }
]