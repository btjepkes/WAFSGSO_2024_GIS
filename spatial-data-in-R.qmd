---
title: "4. Spatial Data in R"
subtitle: "Vector and raster packages, spatial operations, and cartography."
---

## What is R and RStudio?

### The Language (R)

-   R is a powerful programming language used for data analysis and visualization
-   Wide range of packages and libraries, making it suitable for various scientific disciplines, including spatial data analysis in wildlife and fisheries science

### The IDE (RStudio)

-   Integrated development environment for R (and Python, Julia)
-   Interface with data sources and tables, allows for code completion and syntax highlighting
-   Allows for easy access to version control functionality, such as git and GitHub
-   Alternatives = VSCode, Jupyter Notebook

![RStudio interface](img-rstudio-interface.jpg)

## Why Use R for Spatial Data?

-   **Open source** (free) option to build maps, perform analyses, and convert data
    -   If working with non-profits or in academia, many entities have expertise in R
-   Allows for **reproducible science** and workflows (sound familiar?)
    -   Supplementary material for manuscripts
    -   Co-workers can use entire scripts or snippets to update models and maps
-   **Integrates** with thousands of other R packages for modeling, spatial statistics, and visualization
-   Well-documented and plenty of examples from a continuously **growing community** of R users

## Basics of R Programming

Each programming language has specific ways of doing things, and R is no different. The following section contains a general introduction to R classes and data types.

### Data Classes

Depending on which operations you are performing, the data class will make a huge difference. These classes determine how R treats and operates on the data.

#### Numeric

Numeric data class represents continuous numerical values. E.g., temperature

```{r}
# Print a numeric vector
c(3.14, 2.718, -10, 100.5)
```

#### Integer

Integer data class represents whole numbers without decimal points. E.g., counts

```{r}
# Print an integer vector
c(1L, 2L, -5L, 100L)
```

#### Character

Character data class represents text strings. E..g., identification

```{r}
# Creating a character vector
c("apple", "banana", "cherry")
```

#### Factor

Factor data class represents categorical variables with a fixed set of possible values. E.g., land cover

```{r}
# Creating a factor vector
factor(c("male", "female", "female", "male"),
       # specify levels
       levels = c("male", "female"))
```

#### Logical

Logical data class represents binary values indicating true or false. E.g., presence/abscence

```{r}
# Creating a logical vector
c(TRUE, FALSE, TRUE, TRUE)

# Specify binary as logical
as.logical(c(1,1,0,1,0))
```

### Data Types/Structures

#### Vectors:

One-dimensional arrays that can hold numeric, character, or logical values.

```{r}
# Numeric vector
c(1, 2, 3, 4, 5)

# Character vector
c("apple", "banana", "orange", "grape", "kiwi")

# Logical vector
c(TRUE, FALSE, TRUE, FALSE, TRUE)
```

#### Matrices:

Two-dimensional arrays with rows and columns of the same data type.

```{r}
# Create a matrix
# Create a 3x3 matrix with data filled by row-wise
matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) 
```

#### Data Frames:

Tabular data structures, similar to spreadsheets, consisting of rows and columns.

```{r}
# Create a data frame
data.frame(
  Name = c("John", "Alice", "Bob", "Emily"),
  Age = c(25, 30, 35, 28),
  Gender = c("Male", "Female", "Male", "Female"),
  stringsAsFactors = FALSE
)
```

#### Lists:

Collections of objects, which can be of different data types.

```{r}
list(
  numeric_vector = c(1, 2, 3),
  character_vector = c("a", "b", "c"),
  matrix_data = matrix(1:4, nrow = 2),
  data_frame = data.frame(
    Name = c("John", "Alice"),
    Age = c(25, 30),
    stringsAsFactors = FALSE
  )
)
```

### Basic Operations

#### Arithmetic operations:

These run mathematical operations on two or more elements.

```{r}
# Addition
10 + 5

# Subtraction
10 - 5

# Multiplication
10 * 5

# Division
10 / 5

# Explonetiation
10 ^ 5

# Square root
sqrt(10)
```

#### Logical operations:

These assess relationships between two or more elements.

```{r}
# Less than
10 < 5

# Greater than
10 > 5

# Equal to
10 == 5

# Not equal to
10 != 5
```

#### Assignment operators:

These assign values or groups of values to an object that is stored in memory.

```{r}
# Assigning numeric
var_1 <- 10
var_1

# Assigning character strings
var_2 <- "species"
var_2

# Assigning vector of strings
var_3 <- c("sppA", "sppB", "sppC")
var_3
```

#### Function calls:

These pass a series of arguments to a pre-defined process, called a function.

``` r
name_of_function(argument_1 = value_1,
                 argument_2 = value_2,
                 argument_3 = value_3)
```

## R Packages

Packages in R are collections of functions curated by developers to make life easier. They extend the functionality by providing additional tools, common workflows, and accessible datasets.

### Installing & Loading Packages

R packages can generally be downloaded/installed via two primary methods. (1) from the CRAN - Comprehensive R Archive Network, or (2) from a GitHub repository containing the package. While many popular packages are on CRAN, specific application packages might only be available on GitHub.

``` r
# Installing packages from CRAN
install.packages("package_name")

# Installing packages from GitHub
  ## Install and load the remotes package (if not already installed)
  if (!requireNamespace("remotes", quietly = TRUE)) {
    install.packages("remotes")}
  library(remotes)
  ## Install the package from the GitHub repository
  install_github("username/repository")

# Loading any installed package
library(package_name)
```

### The Tidyverse

The [tidyverse](https://www.tidyverse.org/) is a collection of R packages designed for data science and statistical analysis. It provides a cohesive framework for working with data by emphasizing consistency, readability, and efficiency.

``` r
# Installing the tidyverse entirely, note the name as a string
install.packages("tidyverse")
```

The core philosophy of the tidyverse centers around the principles outlined in the "tidy data" concept, where datasets are organized in a structured format with each variable forming a column, each observation forming a row, and each type of observational unit forming a table.

-   [ggplot2](https://ggplot2.tidyverse.org/) - for creating static and interactive visualizations
-   [dplyr](https://dplyr.tidyverse.org/) - for data manipulation, filtering, and summarizing
-   [tidyr](https://tidyr.tidyverse.org/) - for getting data into tidy wide and tidy long formats
-   [readr](https://readr.tidyverse.org/) - for reading flat files, like .csv and .tsv
-   [purrr](https://purrr.tidyverse.org/) - for working with functions and vectors
-   [tibble](https://tibble.tidyverse.org/) - for easy handling of tidy dataframes
-   [stringr](https://stringr.tidyverse.org/) - for working with strings
-   [forcats](https://forcats.tidyverse.org/) - for working with factors (categorical data)

#### Piping Functions

The tidyverse also introduced the pipe (`%>%`) which allows the chaining of functions. Pipes enable expressive code where the output of a previous function becomes the first argument of the next function, enabling *chaining*. RStudio now has a native pipe (`|>`) that works with a variety of non-tidyverse packages. **Note: ctrl+shift+M = shortcut**

``` r
# Example code with piped functions, note the native R pipe used
present_veg_area <- present_veg_sf |> 
  mutate(BeaverVegCat = as.factor(BeaverVegCat)) |> 
  group_by(LandscapeID, BeaverVegCat, Survey_Year) |> 
  summarise(total_veg_area_m2 = sum(area_m2, na.rm = TRUE)) |> 
  arrange(LandscapeID)
```

## Common R Spatial Packages

There are likely over 100 R packages that can handle some aspect of spatial data, these are the most popular ones that we will explore some in the workshop. A more comprehensive list can be found here: <https://cran.r-project.org/web/views/Spatial.html>

Spatial packages in R are currently in a transition period, with many historically common packages being replaced by newer, more performant varieties. E.g., `sp`, `rgdal`, `rgeos`, and `raster` are deprecated along with their spatial object types, but are often still dependencies.

**Note:** <i style= "color: green;" class="bi bi-check2-circle"></i> **indicates packages utilized in this workshop.**

### For General Spatial Data Handling

-   [sf](https://r-spatial.github.io/sf/) - for working with vector spatial data <i style= "color: green;" class="bi bi-check2-circle"></i>
-   [terra](https://rspatial.github.io/terra/) - for working with raster spatial data <i style= "color: green;" class="bi bi-check2-circle"></i>
-   [stars](https://r-spatial.github.io/stars/) - for working with spatial time series (vector and raster data cubes)
-   [spatstat](https://spatstat.org/) - for spatial statistics, focusing on spatial point patterns
-   [sfnetworks](https://luukvdmeer.github.io/sfnetworks/) - for analysis of geospatial networks
-   [geometa](https://github.com/eblondel/geometa/wiki) - for writing and reading OGC/ISO geographic metadata in R
-   [ncdf4](https://cirrus.ucsd.edu/~pierce/ncdf/) - for reading, writing, and manipulating netCDF files
-   [mapedit](https://r-spatial.org/r/2017/01/30/mapedit_intro.html) - for drawing, editing, and deleting spatial data interactively in R

### For Ecology & Natural Resources

-   [rgbif](https://github.com/ropensci/rgbif) - interface with the GBIF to download and view species occurrence records from database
-   [landscapemetrics](https://r-spatialecology.github.io/landscapemetrics/) - for landscape ecology metric calculations (FRAGSTATS for R)
-   [spatialEco](https://github.com/jeffreyevans/spatialEco) - for spatial analysis and modelling of ecological systems
-   [ade4](https://adeverse.github.io/ade4/) - some capabilities for spatial multivariate analysis methods for ecology
-   [adehabitatHR](https://cran.r-project.org/web/packages/adehabitatHR/index.html) - a collection of tools for analyzing wildlife habitat selection and spatial ecology
-   [dismo](https://rspatial.org/raster/sdm/) - tools for species distribution modeling and ecological niche modeling

### For Mapping & Cartography

-   [ggplot2](https://ggplot2.tidyverse.org/) - creating static maps in the grammar of graphics style <i style= "color: green;" class="bi bi-check2-circle"></i>
-   [tmap](https://r-tmap.github.io/tmap/) - simple thematic maps, including both static and interactive map options <i style= "color: green;" class="bi bi-check2-circle"></i>
-   [mapsf](https://riatelab.github.io/mapsf/) - simple map creation using sf objects in the ggplot2 system, successor of `cartography`
-   [leaflet](https://rstudio.github.io/leaflet/index.html) - for creating interactive web maps, including popups and basemaps
-   [mapview](https://r-spatial.github.io/mapview/) - provides an interactive viewer for exploring spatial data <i style= "color: green;" class="bi bi-check2-circle"></i>
-   [plotly](https://plotly.com/r/getting-started/) - turns maps built with ggplot2 into interactive charts
-   [ggspatial](https://paleolimbot.github.io/ggspatial/index.html) - adds spatial geometries and annotations to ggplot2

### For Getting Spatial Data

-   [rnaturalearth](http://ropensci.github.io/rnaturalearth/) - state and national boundaries across the United States and world
-   [tidycensus](https://walker-data.com/tidycensus/) - population, state boundaries, and other census metrics
-   [tigris](https://github.com/walkerke/tigris) - TIGER/Line files (i.e., roads, highways) from U.S. Census
-   [geodata](https://github.com/rspatial/geodata) - diverse source of climate, elevation, admin boundaries, land use, and more
-   [elevatr](https://github.com/jhollist/elevatr) - elevation rasters across the world
-   [osmdata](https://docs.ropensci.org/osmdata/) - any and all Open Street Map features, including roads, buildings, and more
-   [spocc](https://docs.ropensci.org/spocc/) - many species occurrence repositories, including GBIF, BISON, iNaturalist, eBird

## Loading Spatial Data Into R

Several R packages can load spatial data into the R environment, but we will focus on `sf` and `terra` for this workshop. Note that creating an R spatial object does not save it to a file directory automatically, it simply loads the spatial information into your current R session (in memory). For large files, it can be useful to subset to only include a specific area of interest (AOI).

### Vector Data

Remember that the vector data model represents points, lines, and polygons. We can load these spatial features into our R environment with the `sf` package using the `st_read()` function. But first we use the `st_layers` function to identify all the layers we have available to us in our geopackage.

``` r
## Reference spatial layers from geopackage (n = 25)
gpkg_dsn <- "BeaverHabitatSelection.gpkg"
gpkg_layers <- sf::st_layers(dsn = gpkg_dsn)

## Load in beaver-absent vegetation layer
absent_veg_sf <- sf::st_read(dsn = gpkg_dsn,
                             layer = gpkg_layers$name[3])
```

If we need to reference a **shapefile** in our directory, we can still use `st_read()` but need to specify the .shp extension in our function.

``` r
# Set the file path to your shapefile (.shp)
path <- "path/to/your/shapefile.shp"

# Read the shapefile using sf::st_read()
shapefile <- sf::st_read(path)
```

#### Simple Feature Geometry Types

The "sf" in `sf` stands for simple features, which is an open data standard by the Open Geospatial Consortium (OGC). This standard is used across many software systems (e.g., QGIS, PostGIS) and contains seven core geometry types that are supported by `sf`.

-   **Single Geometries**
    -   POINT - by using `st_point()`
    -   LINESTRING - by using `st_linestring()`
    -   POLYGON - by using `st_polygon()`
-   **Multiple Geometries**
    -   MULTIPOINT - by using `st_multipoint()`
    -   MULTILINESTRING - by using `st_multilinestring()`
    -   MULTIPOLYGON - by using `st_multipolygon()`
-   **Geometry Collections**
    -   GEOMETRYCOLLECTION - by using `st_geometrycollection()`

### Raster Data

Remember that the raster data model represents the world with a continuous grid of cells, called pixels. We can load raster files (e.g., .tif) into our R environment using the `rast()` function in the `terra` package.

``` r
# Set tje file path to your raster, in this case a .tif
raster_filepath = system.file("raster/srtm.tif")

# Read the raster as a SpatRaster
my_rast = rast(raster_filepath)
```

Every raster object has a header that can be viewed by calling the object in the console. This contains information like the dimensions and CRS of the raster.

``` r
# Call the raster object to view its header
my_rast

#> class       : SpatRaster 
#> dimensions  : 457, 465, 1  (nrow, ncol, nlyr)
#> resolution  : 0.000833, 0.000833  (x, y)
#> extent      : -113, -113, 37.1, 37.5  (xmin, xmax, ymin, ymax)
#> coord. ref. : lon/lat WGS 84 (EPSG:4326) 
#> source      : srtm.tif 
#> name        : srtm 
#> min value   : 1024 
#> max value   : 2892
```

It is important to note that several other R packages still require raster data to be in the older format handled by the `raster` package. In this case, we can coerce our SpatRaster into the `raster` format.

``` r
# Convert to a RasterLayer
my_RasterLayer <- raster::raster(my_rast)

# Convert to a RasterStack
my_RasterStack <- raster::stack(my_rast, my_rast)
```

## Spatial Filtering and Operations

### Joining

``` r
world_coffee = left_join(world, coffee_data)
#> Joining with `by = join_by(name_long)`

class(world_coffee)
#> [1] "sf"         "tbl_df"     "tbl"        "data.frame"
```

### Raster Calculations

### Summarizing Data

``` r
world_agg4  = world |> 
  group_by(continent) |> 
  summarize(Pop = sum(pop, na.rm = TRUE),
            Area = sum(area_km2),
            N = n())
```

## Mapping Spatial Data In R

As we saw before, several packages can create maps in R so we have several to pick from. Which one you use will depend on your familiarity with the package and the purpose of the map you are creating.

In general, there are two types of maps we will create in R: **(1) static**, such as those for publications, and **(2) interactive/dynamic,** such as those we can view on our computer screens and allow us to zoom in and drag to navigate around the map.

### ggplot

``` r
library(ggplot2)

# Create a map using ggplot2
ggplot() +
  geom_sf(data = World,
          aes(group = group),
          fill = "lightblue",
          color = "black") +
  labs(title = "Map using ggplot2") +
  theme_minimal()
```

### tmap

``` r
library(tmap)

# Create a map using tmap
tm_shape(World) +
  tm_polygons(col = "lightblue",
              border.col = "black") +
  tm_layout(title = "Map using tmap")
```

### mapview

``` r
library(mapview)

# Create a map using mapview
mapview(World,
        zcol = NULL,
        col.regions = "lightblue",
        legend = TRUE, 
        map.types = "Esri.WorldGrayCanvas",
        layer.name = "Map using mapview")
```
