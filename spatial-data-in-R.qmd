---
title: "4. Spatial Data in R"
subtitle: "Vector and raster packages, spatial operations, cartography."
---

## What is R and RStudio?

### The Language (R)

-   R is a powerful programming language used for data analysis and visualization
-   Wide range of packages and libraries, making it suitable for various scientific disciplines, including spatial data analysis in wildlife and fisheries science

### The IDE (RStudio)

-   Integrated development environment for R (and Python, Julia)
-   Interface with data sources and tables, allows for code completion and syntax highlighting
-   Alternatives = VSCode, Jupyter Notebook

![RStudio interface](img-rstudio-interface.jpg)

## Why Use R for Spatial Data?

-   **Open source** (free) option to build maps, perform analyses, and convert data
    -   If working with non-profits or in academia, many entities have expertise in R
-   Allows for **reproducible science** and workflows (sound familiar?)
    -   Supplementary material for manuscripts
    -   Co-workers can use entire scripts or snippets to update models and maps
-   **Integrates** with thousands of other R packages for modeling, spatial statistics, and visualization
-   Well-documented and plenty of examples from a continuously **growing community** of R users

## Basics of R Programming

Each programming language has specific ways of doing things, and R is no different.

### Data Types

### Data Structures

#### Vectors:

One-dimensional arrays that can hold numeric, character, or logical values.

```{r}
# Numeric vector
c(1, 2, 3, 4, 5)

# Character vector
c("apple", "banana", "orange", "grape", "kiwi")

# Logical vector
c(TRUE, FALSE, TRUE, FALSE, TRUE)
```

#### Matrices:

Two-dimensional arrays with rows and columns of the same data type.

```{r}
# Create a matrix
# Create a 3x3 matrix with data filled by row-wise
matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) 
```

#### Data Frames:

Tabular data structures, similar to spreadsheets, consisting of rows and columns.

```{r}
# Create a data frame
data.frame(
  Name = c("John", "Alice", "Bob", "Emily"),
  Age = c(25, 30, 35, 28),
  Gender = c("Male", "Female", "Male", "Female"),
  stringsAsFactors = FALSE
)
```

#### Lists:

Collections of objects, which can be of different data types.

```{r}
list(
  numeric_vector = c(1, 2, 3),
  character_vector = c("a", "b", "c"),
  matrix_data = matrix(1:4, nrow = 2),
  data_frame = data.frame(
    Name = c("John", "Alice"),
    Age = c(25, 30),
    stringsAsFactors = FALSE
  )
)
```

### Basic Operations

#### Arithmetic operations:

These run mathematical operations on two or more elements.

```{r}
# Addition
10 + 5

# Subtraction
10 - 5

# Multiplication
10 * 5

# Division
10 / 5

# Explonetiation
10 ^ 5

# Square root
sqrt(10)
```

#### Logical operations:

These assess relationships between two or more elements.

```{r}
# Less than
10 < 5

# Greater than
10 > 5

# Equal to
10 == 5

# Not equal to
10 != 5
```

#### Assignment operators:

These assign values or groups of values to an object that is stored in memory.

```{r}
# Assigning numeric
var_1 <- 10
var_1

# Assigning character strings
var_2 <- "species"
var_2

# Assigning vector of strings
var_3 <- c("sppA", "sppB", "sppC")
var_3
```

#### Function calls:

These pass a series of arguments to a pre-defined process, called a function.

``` r
name_of_function(argument_1 = value_1,
                 argument_2 = value_2,
                 argument_3 = value_3)
```

## R Packages

Packages in R are collections of functions curated by developers to make life easier. They extend the functionality by providing additional tools, common workflows, and accessible datasets.

### Installing & Loading Packages

R packages can generally be downloaded/installed via two primary methods. (1) from the CRAN - Comprehensive R Archive Network, or (2) from a GitHub repository containing the package. While many popular packages are on CRAN, specific application packages might only be available on GitHub.

``` r
# Installing packages from CRAN
install.packages("package_name")

# Installing packages from GitHub
  ## Install and load the remotes package (if not already installed)
  if (!requireNamespace("remotes", quietly = TRUE)) {
    install.packages("remotes")}
  library(remotes)
  ## Install the package from the GitHub repository
  install_github("username/repository")

# Loading any installed package
library(package_name)
```

### The Tidyverse

The [tidyverse](https://www.tidyverse.org/) is a collection of R packages designed for data science and statistical analysis. It provides a cohesive framework for working with data by emphasizing consistency, readability, and efficiency.

``` r
# Installing the tidyverse entirely, note the name as a string
install.packages("tidyverse")
```

The core philosophy of the tidyverse centers around the principles outlined in the "tidy data" concept, where datasets are organized in a structured format with each variable forming a column, each observation forming a row, and each type of observational unit forming a table.

-   [ggplot2](https://ggplot2.tidyverse.org/) - for creating static and interactive visualizations
-   [dplyr](https://dplyr.tidyverse.org/) - for data manipulation, filtering, and summarizing
-   [tidyr](https://tidyr.tidyverse.org/) - for getting data into tidy wide and tidy long formats
-   [readr](https://readr.tidyverse.org/) - for reading flat files, like .csv and .tsv
-   [purrr](https://purrr.tidyverse.org/) - for working with functions and vectors
-   [tibble](https://tibble.tidyverse.org/) - for easy handling of tidy dataframes
-   [stringr](https://stringr.tidyverse.org/) - for working with strings
-   [forcats](https://forcats.tidyverse.org/) - for working with factors (categorical data)

The tidyverse also introduced the pipe (`%>%`) which allows the chaining of functions. RStudio now has a native pipe (`|>`) that works with a variety of non-tidyverse packages. **Note: ctrl+shift+M = shortcut**

``` r
# Example code with piped functions, note the native R pipe used
present_veg_area <- present_veg_sf |> 
  mutate(BeaverVegCat = as.factor(BeaverVegCat)) |> 
  group_by(LandscapeID, BeaverVegCat, Survey_Year) |> 
  summarise(total_veg_area_m2 = sum(area_m2, na.rm = TRUE)) |> 
  arrange(LandscapeID)
```

## Common R Spatial Packages

There are likely over 100 R packages that can handle some aspect of spatial data, these are the most popular ones that we will explore some in the workshop. A more comprehensive list can be found here: <https://cran.r-project.org/web/views/Spatial.html>

Spatial packages in R are currently in a transition period, with many historically common packages being replaced by newer, more performant varieties. E.g., `sp`, `rgdal`, `rgeos`, and `raster` are deprecated along with their spatial object types, but are often still dependencies.

**Note:** <i style= "color: green;" class="bi bi-check2-circle"></i> **indicates packages utilized in this workshop.**

### For General Spatial Data Handling

-   [sf](https://r-spatial.github.io/sf/) - for working with vector spatial data <i style= "color: green;" class="bi bi-check2-circle"></i>
-   [terra](https://rspatial.github.io/terra/) - for working with raster spatial data <i style= "color: green;" class="bi bi-check2-circle"></i>
-   [stars](https://r-spatial.github.io/stars/) - for working with spatial time series (vector and raster data cubes)
-   [spatstat](https://spatstat.org/) - for spatial statistics, focusing on spatial point patterns
-   [sfnetworks](https://luukvdmeer.github.io/sfnetworks/) - for analysis of geospatial networks
-   geometa -
-   [ncdf4](https://cirrus.ucsd.edu/~pierce/ncdf/) - for reading, writing, and manipulating netCDF files

### For Ecology & Natural Resources

-   rgbif
-   landscapemetrics
-   

### For Mapping & Cartography

-   ggplot2
-   tmap
-   mapsf
-   cartography
-   leaflet
-   mapview
-   plotly + ggplot2

### For Getting Spatial Data

-   rnaturalearth - state and national boundaries across the United States and world
-   tidycensus - population, state boundaries, and other census metrics
-   tigris - TIGER/Line files (i.e., roads, highways) from U.S. Census
-   geodata - diverse source of climate, elevation, admin boundaries, land use, and more
-   elevatr - elevation rasters across the world
-   osmdata - any and all Open Street Map features, including roads, buildings, and more
-   spocc - many species occurrence repositories, including GBIF, BISON, iNaturalist, eBird

## Loading Spatial Data Into R

### Vector Data

### Raster Data

## Mapping Spatial Data In R

### ggplot

### tmap

### mapview
